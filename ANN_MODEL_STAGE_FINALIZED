{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1V-CQsm70HqtRMyydCiXeOwkOUoFBsQ8W","timestamp":1694717844387},{"file_id":"132MTTEbvsPT95li0skmQP5j3YkP4BxzP","timestamp":1649875942211}]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","source":["from google.colab import drive\n","drive.mount('/content/drive')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"e-pBX7EGjKNM","executionInfo":{"status":"ok","timestamp":1694883217458,"user_tz":360,"elapsed":17047,"user":{"displayName":"NAZILA ameli","userId":"11519358739927677652"}},"outputId":"7f976c21-eadd-4762-b562-5cdc77928972"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}]},{"cell_type":"code","execution_count":null,"metadata":{"id":"AHRUaIj2ZIHb"},"outputs":[],"source":["#Importing reqiered libraries\n","import pandas as pd\n","from sklearn.ensemble import AdaBoostClassifier\n","from sklearn import datasets\n","# Import train_test_split function\n","from sklearn.model_selection import train_test_split\n","#Import scikit-learn metrics module for accuracy calculation\n","from sklearn import metrics"]},{"cell_type":"code","source":["# Load your Excel data into a DataFrame\n","data = pd.read_excel('/content/drive/MyDrive/ANN dataset/cleaned data combined.xlsx')\n","data.shape\n","\n","# check distribution of target_class column\n","data['Stage'].value_counts()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"uQT_hwaJE6VS","executionInfo":{"status":"ok","timestamp":1694884590493,"user_tz":360,"elapsed":233,"user":{"displayName":"NAZILA ameli","userId":"11519358739927677652"}},"outputId":"2493aee9-4016-453e-bd70-010b80f7076c"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["III    208\n","IV      61\n","II      35\n","I        5\n","Name: Stage, dtype: int64"]},"metadata":{},"execution_count":52}]},{"cell_type":"code","source":["# view summary of dataset\n","data[['Systolic BP', 'Diastolic BP']] = data['Blood pressure'].str.split('/', expand=True)\n","data.drop(columns= \"Blood pressure\", inplace=True)\n","data.drop('Chart No', axis=1, inplace=True)\n","data.drop('Plaque', axis=1, inplace=True)\n","data.drop('Date', axis=1, inplace=True)\n","data.drop('GBR', axis=1, inplace=True)\n","data.drop('BMI', axis=1, inplace=True)\n","data.drop('Comment', axis=1, inplace=True)\n","data.info()"],"metadata":{"id":"1ugh8zEVZez6","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1694884597716,"user_tz":360,"elapsed":223,"user":{"displayName":"NAZILA ameli","userId":"11519358739927677652"}},"outputId":"4c4e038c-ab51-4fce-caf9-fe6e6c7f2f20"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 309 entries, 0 to 308\n","Data columns (total 20 columns):\n"," #   Column                        Non-Null Count  Dtype  \n","---  ------                        --------------  -----  \n"," 0   Stage                         309 non-null    object \n"," 1   Grade                         306 non-null    object \n"," 2   Heart rate                    245 non-null    float64\n"," 3   Stain                         203 non-null    object \n"," 4   Calculus                      206 non-null    object \n"," 5   Smoking                       150 non-null    object \n"," 6   Bone loss                     24 non-null     object \n"," 7   Tooth mobility                41 non-null     object \n"," 8   Allergies                     18 non-null     object \n"," 9   GTR                           33 non-null     object \n"," 10  FGG                           12 non-null     object \n"," 11  Diabetes                      12 non-null     object \n"," 12  Count of teeth with pockets   300 non-null    float64\n"," 13  POCKET SCORE                  300 non-null    object \n"," 14  count of teeth with CAL       296 non-null    float64\n"," 15  CAL SCORE                     296 non-null    object \n"," 16  count of teeth with BLEEDING  295 non-null    float64\n"," 17  count of teeth with PLAQUE    266 non-null    float64\n"," 18  Systolic BP                   279 non-null    object \n"," 19  Diastolic BP                  279 non-null    object \n","dtypes: float64(5), object(15)\n","memory usage: 48.4+ KB\n"]}]},{"cell_type":"code","source":["#recoding variables\n","data['Stage']= data['Stage'].replace(['I','II','III','IV'],[1,2,3,4])\n","data['Grade']= data['Grade'].replace(['A','B','C','N/A'],[1,2,3,0])\n","data['Stain']= data['Stain'].replace(['No','Yes','Light','Medium','Heavy','N/A'],[0,1,2,3,4,-1])\n","data['Calculus']= data['Calculus'].replace(['No','Light','Medium','Heavy','N/A'],[0,1,2,3,-1])\n","data['Smoking']= data['Smoking'].replace(['No','Quit','Yes','N/A'],[0,1,2,-1])\n","data['Tooth mobility']= data['Tooth mobility'].replace(['No','Yes','N/A'],[0,1,-1])\n","data['Allergies']= data['Allergies'].replace(['No','Yes','N/A'],[0,1,-1])\n","data['POCKET SCORE']= data['POCKET SCORE'].replace(['GENERALIZED','LOCALIZED'],[1,0])\n","data['CAL SCORE']= data['CAL SCORE'].replace(['GENERALIZED','LOCALIZED'],[1,0])\n","data['Bone loss']= data['Bone loss'].replace(['Vertical','Horizontal','Generalized','Circumferential','Yes', 'N/A'],[1,1,1,1,1,0])\n","data['GTR']= data['GTR'].replace(['Indicated','N/A'],[1,0])\n","data['FGG']= data['FGG'].replace(['Indicated','N/A'],[1,0])\n","data['Diabetes']= data['Diabetes'].replace(['Diabetic','II','N/A'],[1,1,0])\n","data.info()"],"metadata":{"id":"6cLDhLQ-Ziai","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1694884601141,"user_tz":360,"elapsed":211,"user":{"displayName":"NAZILA ameli","userId":"11519358739927677652"}},"outputId":"0ec56533-c273-4270-d90b-5998e2a966b1"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 309 entries, 0 to 308\n","Data columns (total 20 columns):\n"," #   Column                        Non-Null Count  Dtype  \n","---  ------                        --------------  -----  \n"," 0   Stage                         309 non-null    int64  \n"," 1   Grade                         306 non-null    float64\n"," 2   Heart rate                    245 non-null    float64\n"," 3   Stain                         203 non-null    float64\n"," 4   Calculus                      206 non-null    float64\n"," 5   Smoking                       150 non-null    float64\n"," 6   Bone loss                     24 non-null     float64\n"," 7   Tooth mobility                41 non-null     float64\n"," 8   Allergies                     18 non-null     float64\n"," 9   GTR                           33 non-null     float64\n"," 10  FGG                           12 non-null     float64\n"," 11  Diabetes                      12 non-null     float64\n"," 12  Count of teeth with pockets   300 non-null    float64\n"," 13  POCKET SCORE                  300 non-null    float64\n"," 14  count of teeth with CAL       296 non-null    float64\n"," 15  CAL SCORE                     296 non-null    float64\n"," 16  count of teeth with BLEEDING  295 non-null    float64\n"," 17  count of teeth with PLAQUE    266 non-null    float64\n"," 18  Systolic BP                   279 non-null    object \n"," 19  Diastolic BP                  279 non-null    object \n","dtypes: float64(17), int64(1), object(2)\n","memory usage: 48.4+ KB\n"]}]},{"cell_type":"code","source":["#get rid of null values\n","data['Heart rate'].fillna(int(data['Heart rate'].mean()), inplace=True)\n","data['Count of teeth with pockets'].fillna(int(data['Count of teeth with pockets'].mean()), inplace=True)\n","data['count of teeth with CAL'].fillna(int(data['count of teeth with CAL'].mean()), inplace=True)\n","data['count of teeth with PLAQUE'].fillna(int(data['count of teeth with PLAQUE'].mean()), inplace=True)\n","data['count of teeth with BLEEDING'].fillna(int(data['count of teeth with BLEEDING'].mean()), inplace=True)\n","data[\"Grade\"].fillna(0, inplace = True)\n","data[\"Stain\"].fillna(0, inplace = True)\n","data[\"Calculus\"].fillna(0, inplace = True)\n","data[\"Bone loss\"].fillna(0, inplace = True)\n","data[\"Smoking\"].fillna(0, inplace = True)\n","data[\"Tooth mobility\"].fillna(0, inplace = True)\n","data[\"Allergies\"].fillna(0, inplace = True)\n","data[\"GTR\"].fillna(0, inplace = True)\n","data[\"FGG\"].fillna(0, inplace = True)\n","data[\"Diabetes\"].fillna(0, inplace = True)\n","data[\"POCKET SCORE\"].fillna(0, inplace = True)\n","data[\"CAL SCORE\"].fillna(0, inplace = True)\n","data.info()"],"metadata":{"id":"KueEDgIiZl8L","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1694884660588,"user_tz":360,"elapsed":169,"user":{"displayName":"NAZILA ameli","userId":"11519358739927677652"}},"outputId":"fdc8ef49-1d4b-40a9-cec8-062be791e728"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 309 entries, 0 to 308\n","Data columns (total 20 columns):\n"," #   Column                        Non-Null Count  Dtype  \n","---  ------                        --------------  -----  \n"," 0   Stage                         309 non-null    int64  \n"," 1   Grade                         309 non-null    float64\n"," 2   Heart rate                    309 non-null    float64\n"," 3   Stain                         309 non-null    float64\n"," 4   Calculus                      309 non-null    float64\n"," 5   Smoking                       309 non-null    float64\n"," 6   Bone loss                     309 non-null    float64\n"," 7   Tooth mobility                309 non-null    float64\n"," 8   Allergies                     309 non-null    float64\n"," 9   GTR                           309 non-null    float64\n"," 10  FGG                           309 non-null    float64\n"," 11  Diabetes                      309 non-null    float64\n"," 12  Count of teeth with pockets   309 non-null    float64\n"," 13  POCKET SCORE                  309 non-null    float64\n"," 14  count of teeth with CAL       309 non-null    float64\n"," 15  CAL SCORE                     309 non-null    float64\n"," 16  count of teeth with BLEEDING  309 non-null    float64\n"," 17  count of teeth with PLAQUE    309 non-null    float64\n"," 18  Systolic BP                   309 non-null    float64\n"," 19  Diastolic BP                  309 non-null    float64\n","dtypes: float64(19), int64(1)\n","memory usage: 48.4 KB\n"]}]},{"cell_type":"code","source":["#get rid of null values for blood pressure using the mean value of the column\n","data['Systolic BP'].fillna(0, inplace=True)\n","data['Diastolic BP'].fillna(0, inplace=True)\n","data['Systolic BP'] = data['Systolic BP'].astype(int)\n","data['Diastolic BP'] = data['Diastolic BP'].astype(int)\n","data['Systolic BP'] = data['Systolic BP'].replace(0,\n","    data['Systolic BP'].mean())\n","data['Diastolic BP'] = data['Diastolic BP'].replace(0,\n","    data['Diastolic BP'].mean())\n","data.head(5)"],"metadata":{"id":"LmuLwSSqZr6n","colab":{"base_uri":"https://localhost:8080/","height":255},"executionInfo":{"status":"ok","timestamp":1694884663320,"user_tz":360,"elapsed":186,"user":{"displayName":"NAZILA ameli","userId":"11519358739927677652"}},"outputId":"154a30d0-5929-4950-f23e-766677465e30"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   Stage  Grade  Heart rate  Stain  Calculus  Smoking  Bone loss  \\\n","0      3    3.0        70.0    0.0       1.0      0.0      999.0   \n","1      3    1.0        72.0    3.0       3.0      0.0      999.0   \n","2      3    2.0        54.0    3.0       1.0      0.0      999.0   \n","3      3    2.0        82.0    4.0       2.0    999.0      999.0   \n","4      3    2.0        62.0  999.0     999.0    999.0      999.0   \n","\n","   Tooth mobility  Allergies    GTR    FGG  Diabetes  \\\n","0           999.0      999.0  999.0  999.0     999.0   \n","1           999.0      999.0  999.0  999.0     999.0   \n","2             0.0      999.0  999.0  999.0     999.0   \n","3           999.0      999.0  999.0  999.0     999.0   \n","4           999.0      999.0  999.0  999.0     999.0   \n","\n","   Count of teeth with pockets  POCKET SCORE  count of teeth with CAL  \\\n","0                         56.0           1.0                     56.0   \n","1                         60.0           1.0                     60.0   \n","2                         46.0           1.0                     46.0   \n","3                         57.0           1.0                     57.0   \n","4                         48.0         999.0                     48.0   \n","\n","   CAL SCORE  count of teeth with BLEEDING  count of teeth with PLAQUE  \\\n","0        1.0                          23.0                         7.0   \n","1        1.0                          31.0                        60.0   \n","2        1.0                          20.0                        19.0   \n","3        1.0                          14.0                        29.0   \n","4      999.0                          21.0                        14.0   \n","\n","   Systolic BP  Diastolic BP  \n","0          106            66  \n","1          132            78  \n","2          136            64  \n","3          134            86  \n","4          144            84  "],"text/html":["\n","  <div id=\"df-552b2907-98a1-4031-8b60-544048aded14\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Stage</th>\n","      <th>Grade</th>\n","      <th>Heart rate</th>\n","      <th>Stain</th>\n","      <th>Calculus</th>\n","      <th>Smoking</th>\n","      <th>Bone loss</th>\n","      <th>Tooth mobility</th>\n","      <th>Allergies</th>\n","      <th>GTR</th>\n","      <th>FGG</th>\n","      <th>Diabetes</th>\n","      <th>Count of teeth with pockets</th>\n","      <th>POCKET SCORE</th>\n","      <th>count of teeth with CAL</th>\n","      <th>CAL SCORE</th>\n","      <th>count of teeth with BLEEDING</th>\n","      <th>count of teeth with PLAQUE</th>\n","      <th>Systolic BP</th>\n","      <th>Diastolic BP</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>3</td>\n","      <td>3.0</td>\n","      <td>70.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>999.0</td>\n","      <td>999.0</td>\n","      <td>999.0</td>\n","      <td>999.0</td>\n","      <td>999.0</td>\n","      <td>999.0</td>\n","      <td>56.0</td>\n","      <td>1.0</td>\n","      <td>56.0</td>\n","      <td>1.0</td>\n","      <td>23.0</td>\n","      <td>7.0</td>\n","      <td>106</td>\n","      <td>66</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>3</td>\n","      <td>1.0</td>\n","      <td>72.0</td>\n","      <td>3.0</td>\n","      <td>3.0</td>\n","      <td>0.0</td>\n","      <td>999.0</td>\n","      <td>999.0</td>\n","      <td>999.0</td>\n","      <td>999.0</td>\n","      <td>999.0</td>\n","      <td>999.0</td>\n","      <td>60.0</td>\n","      <td>1.0</td>\n","      <td>60.0</td>\n","      <td>1.0</td>\n","      <td>31.0</td>\n","      <td>60.0</td>\n","      <td>132</td>\n","      <td>78</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>3</td>\n","      <td>2.0</td>\n","      <td>54.0</td>\n","      <td>3.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>999.0</td>\n","      <td>0.0</td>\n","      <td>999.0</td>\n","      <td>999.0</td>\n","      <td>999.0</td>\n","      <td>999.0</td>\n","      <td>46.0</td>\n","      <td>1.0</td>\n","      <td>46.0</td>\n","      <td>1.0</td>\n","      <td>20.0</td>\n","      <td>19.0</td>\n","      <td>136</td>\n","      <td>64</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>3</td>\n","      <td>2.0</td>\n","      <td>82.0</td>\n","      <td>4.0</td>\n","      <td>2.0</td>\n","      <td>999.0</td>\n","      <td>999.0</td>\n","      <td>999.0</td>\n","      <td>999.0</td>\n","      <td>999.0</td>\n","      <td>999.0</td>\n","      <td>999.0</td>\n","      <td>57.0</td>\n","      <td>1.0</td>\n","      <td>57.0</td>\n","      <td>1.0</td>\n","      <td>14.0</td>\n","      <td>29.0</td>\n","      <td>134</td>\n","      <td>86</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>3</td>\n","      <td>2.0</td>\n","      <td>62.0</td>\n","      <td>999.0</td>\n","      <td>999.0</td>\n","      <td>999.0</td>\n","      <td>999.0</td>\n","      <td>999.0</td>\n","      <td>999.0</td>\n","      <td>999.0</td>\n","      <td>999.0</td>\n","      <td>999.0</td>\n","      <td>48.0</td>\n","      <td>999.0</td>\n","      <td>48.0</td>\n","      <td>999.0</td>\n","      <td>21.0</td>\n","      <td>14.0</td>\n","      <td>144</td>\n","      <td>84</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-552b2907-98a1-4031-8b60-544048aded14')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-552b2907-98a1-4031-8b60-544048aded14 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-552b2907-98a1-4031-8b60-544048aded14');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-79da5ab6-b180-4190-9b9a-d124ada679eb\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-79da5ab6-b180-4190-9b9a-d124ada679eb')\"\n","            title=\"Suggest charts.\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-79da5ab6-b180-4190-9b9a-d124ada679eb button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"]},"metadata":{},"execution_count":58}]},{"cell_type":"code","source":["# Split the data into features (X) and labels (y)\n","X = data.drop(columns=['Stage'])  # Assuming 'Label' is the column with your labels\n","y = data['Stage']"],"metadata":{"id":"gRPqAkjsGdca"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Split dataset into training set and test set (# 70% training and 30% test)\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3)"],"metadata":{"id":"CDQ3Co7seAs8"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#@title Neural Network classification (Tensorflow)\n","#Importing necessary Libraries\n","import numpy as np\n","import pandas as pd\n","import tensorflow as tf\n","#@title Multi-class classification using DNN with Keras\n","import keras\n","from keras.models import Sequential\n","from keras.layers import Dense, Dropout, Activation\n","from tensorflow.keras.optimizers import Adam\n","from tensorflow.keras.utils import to_categorical\n","from tensorflow.keras.utils import to_categorical\n","import numpy as np"],"metadata":{"id":"chagB_LQoqun"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#Performing Feature Scaling (Standardization)\n","from sklearn.preprocessing import StandardScaler\n","sc = StandardScaler()\n","X_train = sc.fit_transform(X_train)\n","X_test = sc.transform(X_test)"],"metadata":{"id":"i4Z-hCdCpT9J"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#Initialising ANN\n","ann = tf.keras.models.Sequential()\n","#Adding First Hidden Layer\n","ann.add(tf.keras.layers.Dense(units=8,activation=\"relu\"))\n","#Adding Second Hidden Layer\n","ann.add(tf.keras.layers.Dense(units=13,activation=\"relu\"))\n","#Adding Output Layer\n","ann.add(tf.keras.layers.Dense(units=4,activation=\"softmax\"))\n","\n","\n","from sklearn.preprocessing import LabelBinarizer\n","label_as_binary = LabelBinarizer()\n","y_train_ann = label_as_binary.fit_transform(y_train)\n","y_test_ann = label_as_binary.fit_transform(y_test)\n","\n","#Compiling ANN\n","ann.compile(optimizer=\"adam\",loss=\"categorical_crossentropy\",metrics=['accuracy'])"],"metadata":{"id":"F3kgkFPwpgfu"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#Fitting ANN\n","ann.fit(X_train,y_train_ann, batch_size= 16, epochs = 50, validation_data=(X_test, y_test_ann))"],"metadata":{"id":"r8z0xErHqvz9","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1694884943703,"user_tz":360,"elapsed":13454,"user":{"displayName":"NAZILA ameli","userId":"11519358739927677652"}},"outputId":"de462bc9-2f71-48cf-d012-2a364b8b654c"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/50\n","14/14 [==============================] - 3s 34ms/step - loss: 1.3134 - accuracy: 0.4630 - val_loss: 1.2620 - val_accuracy: 0.4731\n","Epoch 2/50\n","14/14 [==============================] - 0s 10ms/step - loss: 1.2476 - accuracy: 0.5139 - val_loss: 1.2057 - val_accuracy: 0.5591\n","Epoch 3/50\n","14/14 [==============================] - 0s 16ms/step - loss: 1.1957 - accuracy: 0.5694 - val_loss: 1.1590 - val_accuracy: 0.6129\n","Epoch 4/50\n","14/14 [==============================] - 0s 12ms/step - loss: 1.1543 - accuracy: 0.6204 - val_loss: 1.1192 - val_accuracy: 0.6559\n","Epoch 5/50\n","14/14 [==============================] - 0s 9ms/step - loss: 1.1144 - accuracy: 0.6528 - val_loss: 1.0899 - val_accuracy: 0.6667\n","Epoch 6/50\n","14/14 [==============================] - 0s 8ms/step - loss: 1.0835 - accuracy: 0.6528 - val_loss: 1.0639 - val_accuracy: 0.6667\n","Epoch 7/50\n","14/14 [==============================] - 0s 9ms/step - loss: 1.0569 - accuracy: 0.6528 - val_loss: 1.0402 - val_accuracy: 0.6667\n","Epoch 8/50\n","14/14 [==============================] - 0s 10ms/step - loss: 1.0328 - accuracy: 0.6528 - val_loss: 1.0214 - val_accuracy: 0.6667\n","Epoch 9/50\n","14/14 [==============================] - 0s 9ms/step - loss: 1.0120 - accuracy: 0.6574 - val_loss: 1.0051 - val_accuracy: 0.6774\n","Epoch 10/50\n","14/14 [==============================] - 0s 12ms/step - loss: 0.9936 - accuracy: 0.6574 - val_loss: 0.9930 - val_accuracy: 0.6882\n","Epoch 11/50\n","14/14 [==============================] - 0s 7ms/step - loss: 0.9776 - accuracy: 0.6620 - val_loss: 0.9796 - val_accuracy: 0.6989\n","Epoch 12/50\n","14/14 [==============================] - 0s 7ms/step - loss: 0.9620 - accuracy: 0.6620 - val_loss: 0.9716 - val_accuracy: 0.6989\n","Epoch 13/50\n","14/14 [==============================] - 0s 11ms/step - loss: 0.9491 - accuracy: 0.6620 - val_loss: 0.9623 - val_accuracy: 0.6989\n","Epoch 14/50\n","14/14 [==============================] - 0s 11ms/step - loss: 0.9365 - accuracy: 0.6620 - val_loss: 0.9558 - val_accuracy: 0.6989\n","Epoch 15/50\n","14/14 [==============================] - 0s 8ms/step - loss: 0.9261 - accuracy: 0.6620 - val_loss: 0.9497 - val_accuracy: 0.6989\n","Epoch 16/50\n","14/14 [==============================] - 0s 8ms/step - loss: 0.9173 - accuracy: 0.6620 - val_loss: 0.9444 - val_accuracy: 0.6989\n","Epoch 17/50\n","14/14 [==============================] - 0s 8ms/step - loss: 0.9093 - accuracy: 0.6620 - val_loss: 0.9409 - val_accuracy: 0.6989\n","Epoch 18/50\n","14/14 [==============================] - 0s 7ms/step - loss: 0.9024 - accuracy: 0.6667 - val_loss: 0.9370 - val_accuracy: 0.6989\n","Epoch 19/50\n","14/14 [==============================] - 0s 10ms/step - loss: 0.8952 - accuracy: 0.6667 - val_loss: 0.9339 - val_accuracy: 0.6989\n","Epoch 20/50\n","14/14 [==============================] - 0s 7ms/step - loss: 0.8894 - accuracy: 0.6667 - val_loss: 0.9303 - val_accuracy: 0.6989\n","Epoch 21/50\n","14/14 [==============================] - 0s 8ms/step - loss: 0.8825 - accuracy: 0.6667 - val_loss: 0.9275 - val_accuracy: 0.6989\n","Epoch 22/50\n","14/14 [==============================] - 0s 10ms/step - loss: 0.8765 - accuracy: 0.6667 - val_loss: 0.9250 - val_accuracy: 0.6989\n","Epoch 23/50\n","14/14 [==============================] - 0s 8ms/step - loss: 0.8714 - accuracy: 0.6667 - val_loss: 0.9227 - val_accuracy: 0.6989\n","Epoch 24/50\n","14/14 [==============================] - 0s 13ms/step - loss: 0.8668 - accuracy: 0.6667 - val_loss: 0.9193 - val_accuracy: 0.6989\n","Epoch 25/50\n","14/14 [==============================] - 0s 8ms/step - loss: 0.8627 - accuracy: 0.6667 - val_loss: 0.9155 - val_accuracy: 0.6989\n","Epoch 26/50\n","14/14 [==============================] - 0s 10ms/step - loss: 0.8578 - accuracy: 0.6620 - val_loss: 0.9141 - val_accuracy: 0.6989\n","Epoch 27/50\n","14/14 [==============================] - 0s 8ms/step - loss: 0.8535 - accuracy: 0.6620 - val_loss: 0.9118 - val_accuracy: 0.6989\n","Epoch 28/50\n","14/14 [==============================] - 0s 7ms/step - loss: 0.8492 - accuracy: 0.6620 - val_loss: 0.9093 - val_accuracy: 0.6989\n","Epoch 29/50\n","14/14 [==============================] - 0s 8ms/step - loss: 0.8442 - accuracy: 0.6620 - val_loss: 0.9063 - val_accuracy: 0.6989\n","Epoch 30/50\n","14/14 [==============================] - 0s 10ms/step - loss: 0.8400 - accuracy: 0.6620 - val_loss: 0.9043 - val_accuracy: 0.6989\n","Epoch 31/50\n","14/14 [==============================] - 0s 9ms/step - loss: 0.8357 - accuracy: 0.6620 - val_loss: 0.9032 - val_accuracy: 0.6989\n","Epoch 32/50\n","14/14 [==============================] - 0s 11ms/step - loss: 0.8310 - accuracy: 0.6667 - val_loss: 0.9016 - val_accuracy: 0.6989\n","Epoch 33/50\n","14/14 [==============================] - 0s 14ms/step - loss: 0.8272 - accuracy: 0.6713 - val_loss: 0.9006 - val_accuracy: 0.6989\n","Epoch 34/50\n","14/14 [==============================] - 0s 8ms/step - loss: 0.8235 - accuracy: 0.6667 - val_loss: 0.8978 - val_accuracy: 0.6989\n","Epoch 35/50\n","14/14 [==============================] - 0s 6ms/step - loss: 0.8192 - accuracy: 0.6713 - val_loss: 0.8954 - val_accuracy: 0.6989\n","Epoch 36/50\n","14/14 [==============================] - 0s 5ms/step - loss: 0.8147 - accuracy: 0.6713 - val_loss: 0.8933 - val_accuracy: 0.6989\n","Epoch 37/50\n","14/14 [==============================] - 0s 5ms/step - loss: 0.8104 - accuracy: 0.6667 - val_loss: 0.8923 - val_accuracy: 0.6989\n","Epoch 38/50\n","14/14 [==============================] - 0s 5ms/step - loss: 0.8064 - accuracy: 0.6713 - val_loss: 0.8909 - val_accuracy: 0.6989\n","Epoch 39/50\n","14/14 [==============================] - 0s 6ms/step - loss: 0.8017 - accuracy: 0.6759 - val_loss: 0.8890 - val_accuracy: 0.6989\n","Epoch 40/50\n","14/14 [==============================] - 0s 6ms/step - loss: 0.7988 - accuracy: 0.6759 - val_loss: 0.8881 - val_accuracy: 0.6989\n","Epoch 41/50\n","14/14 [==============================] - 0s 6ms/step - loss: 0.7933 - accuracy: 0.6759 - val_loss: 0.8881 - val_accuracy: 0.6989\n","Epoch 42/50\n","14/14 [==============================] - 0s 6ms/step - loss: 0.7895 - accuracy: 0.6759 - val_loss: 0.8885 - val_accuracy: 0.6989\n","Epoch 43/50\n","14/14 [==============================] - 0s 5ms/step - loss: 0.7860 - accuracy: 0.6759 - val_loss: 0.8894 - val_accuracy: 0.6989\n","Epoch 44/50\n","14/14 [==============================] - 0s 5ms/step - loss: 0.7812 - accuracy: 0.6759 - val_loss: 0.8893 - val_accuracy: 0.6989\n","Epoch 45/50\n","14/14 [==============================] - 0s 5ms/step - loss: 0.7770 - accuracy: 0.6759 - val_loss: 0.8887 - val_accuracy: 0.6989\n","Epoch 46/50\n","14/14 [==============================] - 0s 6ms/step - loss: 0.7727 - accuracy: 0.6759 - val_loss: 0.8889 - val_accuracy: 0.6989\n","Epoch 47/50\n","14/14 [==============================] - 0s 6ms/step - loss: 0.7694 - accuracy: 0.6759 - val_loss: 0.8903 - val_accuracy: 0.6989\n","Epoch 48/50\n","14/14 [==============================] - 0s 5ms/step - loss: 0.7643 - accuracy: 0.6759 - val_loss: 0.8909 - val_accuracy: 0.6989\n","Epoch 49/50\n","14/14 [==============================] - 0s 6ms/step - loss: 0.7606 - accuracy: 0.6806 - val_loss: 0.8909 - val_accuracy: 0.6989\n","Epoch 50/50\n","14/14 [==============================] - 0s 6ms/step - loss: 0.7564 - accuracy: 0.6852 - val_loss: 0.8923 - val_accuracy: 0.6989\n"]},{"output_type":"execute_result","data":{"text/plain":["<keras.src.callbacks.History at 0x78dc3cc2dea0>"]},"metadata":{},"execution_count":65}]},{"cell_type":"code","source":["# @title Saving the model\n","\n","\n","# Define the file path where you want to save the model\n","model_save_path = \"/content/drive/MyDrive/ANN dataset/ANN_model_for_stage.h5\"  # Change this to your desired file path\n","\n","# Save the trained model\n","ann.save(model_save_path)\n","\n","# Define the file path with .keras extension\n","model_save_path = \"/content/drive/MyDrive/ANN dataset/ANN_model_for_stage.keras\"  # Change this to your desired file path with .keras extension\n","\n","# Save the trained model in the native Keras format\n","ann.save(model_save_path)"],"metadata":{"id":"E5tHd6bHHvVy"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# BERT ARTICLE\n","\n","#Performing Feature Scaling (Standardization)\n","from sklearn.preprocessing import StandardScaler\n","sc = StandardScaler()\n","X = sc.fit_transform(X)"],"metadata":{"id":"78F7eelcf5Ty"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# BERT ARTICLE\n","\n","y_ann=  label_as_binary.fit_transform(y)\n","ann.evaluate(X,y_ann,verbose=2)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"6fVh9ucrf1bT","executionInfo":{"status":"ok","timestamp":1694884267551,"user_tz":360,"elapsed":408,"user":{"displayName":"NAZILA ameli","userId":"11519358739927677652"}},"outputId":"6cd8a872-2333-4bca-8413-f0203fc4f15f"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["10/10 - 0s - loss: 0.7855 - accuracy: 0.6958 - 223ms/epoch - 22ms/step\n"]},{"output_type":"execute_result","data":{"text/plain":["[0.7854710221290588, 0.6957928538322449]"]},"metadata":{},"execution_count":48}]},{"cell_type":"code","source":["# @title Predictions on new 32 unseen test data\n","# Prediction on a new unseen data\n","\n","import pandas as pd\n","import numpy as np\n","from sklearn.preprocessing import StandardScaler\n","from sklearn.metrics import accuracy_score\n","\n","# Load the new unseen dataset from the Excel sheet\n","df= pd.read_excel('/content/drive/MyDrive/ANN dataset/Test dataset.xlsx')\n","\n","df[['Systolic BP', 'Diastolic BP']] = df['Blood pressure'].str.split('/', expand=True)\n","df.drop(columns= \"Blood pressure\", inplace=True)\n","df.drop('Chart No', axis=1, inplace=True)\n","df.drop('Plaque', axis=1, inplace=True)\n","df.drop('Date', axis=1, inplace=True)\n","df.drop('GBR', axis=1, inplace=True)\n","df.drop('BMI', axis=1, inplace=True)\n","df.drop('Comment', axis=1, inplace=True)\n","df['Heart rate'].fillna(int(df['Heart rate'].mean()), inplace=True)\n","df['Count of teeth with pockets'].fillna(int(df['Count of teeth with pockets'].mean()), inplace=True)\n","df['count of teeth with CAL'].fillna(int(df['count of teeth with CAL'].mean()), inplace=True)\n","df['count of teeth with PLAQUE'].fillna(int(df['count of teeth with PLAQUE'].mean()), inplace=True)\n","df['count of teeth with BLEEDING'].fillna(int(df['count of teeth with BLEEDING'].mean()), inplace=True)\n","df[\"Grade\"].fillna(0, inplace = True)\n","df[\"Stain\"].fillna(0, inplace = True)\n","df[\"Calculus\"].fillna(0, inplace = True)\n","df[\"Bone loss\"].fillna(0, inplace = True)\n","df[\"Smoking\"].fillna(0, inplace = True)\n","df[\"Tooth mobility\"].fillna(0, inplace = True)\n","df[\"Allergies\"].fillna(0, inplace = True)\n","df[\"GTR\"].fillna(0, inplace = True)\n","df[\"FGG\"].fillna(0, inplace = True)\n","df[\"Diabetes\"].fillna(0, inplace = True)\n","df[\"POCKET SCORE\"].fillna(0, inplace = True)\n","df[\"CAL SCORE\"].fillna(0, inplace = True)\n","df['Stage']= df['Stage'].replace(['I','II','III','IV'],[1,2,3,4])\n","df['Grade']= df['Grade'].replace(['A','B','C','N/A'],[1,2,3,0])\n","df['Stain']= df['Stain'].replace(['No','Yes','Light','Medium','Heavy','N/A'],[0,1,2,3,4,-1])\n","df['Calculus']= df['Calculus'].replace(['No','Light','Medium','Heavy','N/A'],[0,1,2,3,-1])\n","df['Smoking']= df['Smoking'].replace(['No','Quit','Yes','N/A'],[0,1,2,-1])\n","df['Tooth mobility']= df['Tooth mobility'].replace(['No','Yes','N/A'],[0,1,-1])\n","df['Allergies']= df['Allergies'].replace(['No','Yes','N/A'],[0,1,-1])\n","df['POCKET SCORE']= df['POCKET SCORE'].replace(['GENERALIZED','LOCALIZED'],[1,0])\n","df['CAL SCORE']= df['CAL SCORE'].replace(['GENERALIZED','LOCALIZED'],[1,0])\n","df['Bone loss']= df['Bone loss'].replace(['Vertical','Horizontal','Generalized','Circumferential','Yes', 'N/A'],[1,1,1,1,1,0])\n","df['GTR']= df['GTR'].replace(['Indicated','N/A'],[1,0])\n","df['FGG']= df['FGG'].replace(['Indicated','N/A'],[1,0])\n","df['Diabetes']= df['Diabetes'].replace(['Diabetic','II','N/A'],[1,1,0])\n","df['Systolic BP'].fillna(0, inplace=True)\n","df['Diastolic BP'].fillna(0, inplace=True)\n","df['Systolic BP'] = df['Systolic BP'].astype(int)\n","df['Diastolic BP'] = df['Diastolic BP'].astype(int)\n","df['Systolic BP'] = df['Systolic BP'].replace(0,\n","    df['Systolic BP'].mean())\n","df['Diastolic BP'] = df['Diastolic BP'].replace(0,\n","    df['Diastolic BP'].mean())\n","df.head(5)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":238},"id":"1TbE56tKKbny","executionInfo":{"status":"ok","timestamp":1694885119127,"user_tz":360,"elapsed":396,"user":{"displayName":"NAZILA ameli","userId":"11519358739927677652"}},"outputId":"981842d1-1a81-40a7-a42b-a848c194d4d8"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   Stage  Grade  Heart rate  Stain  Calculus  Smoking  Bone loss  \\\n","0      3      3        70.0      0         1        0          0   \n","1      3      1        71.0      3         3        0          0   \n","2      3      2        54.0      3         1        0          0   \n","3      3      2        82.0      4         2        0          0   \n","4      3      2        62.0      0         0        0          0   \n","\n","   Tooth mobility  Allergies  GTR  FGG  Diabetes  Count of teeth with pockets  \\\n","0               0          0    0  0.0         0                         56.0   \n","1               0          0    0  0.0         0                         60.0   \n","2               0          0    0  0.0         0                         46.0   \n","3               0          0    0  0.0         0                         57.0   \n","4               0          0    0  0.0         0                         47.0   \n","\n","   POCKET SCORE  count of teeth with CAL  CAL SCORE  \\\n","0             1                     56.0          1   \n","1             1                     60.0          1   \n","2             1                     46.0          1   \n","3             1                     57.0          1   \n","4             0                     46.0          0   \n","\n","   count of teeth with BLEEDING  count of teeth with PLAQUE  Systolic BP  \\\n","0                          23.0                         7.0        106.0   \n","1                          31.0                        60.0        132.0   \n","2                          20.0                        19.0        136.0   \n","3                          14.0                        33.0        134.0   \n","4                          21.0                        14.0        144.0   \n","\n","   Diastolic BP  \n","0          66.0  \n","1          78.0  \n","2          64.0  \n","3          86.0  \n","4          84.0  "],"text/html":["\n","  <div id=\"df-03d5814e-a17b-4755-8fbc-d225635b8f34\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Stage</th>\n","      <th>Grade</th>\n","      <th>Heart rate</th>\n","      <th>Stain</th>\n","      <th>Calculus</th>\n","      <th>Smoking</th>\n","      <th>Bone loss</th>\n","      <th>Tooth mobility</th>\n","      <th>Allergies</th>\n","      <th>GTR</th>\n","      <th>FGG</th>\n","      <th>Diabetes</th>\n","      <th>Count of teeth with pockets</th>\n","      <th>POCKET SCORE</th>\n","      <th>count of teeth with CAL</th>\n","      <th>CAL SCORE</th>\n","      <th>count of teeth with BLEEDING</th>\n","      <th>count of teeth with PLAQUE</th>\n","      <th>Systolic BP</th>\n","      <th>Diastolic BP</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>3</td>\n","      <td>3</td>\n","      <td>70.0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0.0</td>\n","      <td>0</td>\n","      <td>56.0</td>\n","      <td>1</td>\n","      <td>56.0</td>\n","      <td>1</td>\n","      <td>23.0</td>\n","      <td>7.0</td>\n","      <td>106.0</td>\n","      <td>66.0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>3</td>\n","      <td>1</td>\n","      <td>71.0</td>\n","      <td>3</td>\n","      <td>3</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0.0</td>\n","      <td>0</td>\n","      <td>60.0</td>\n","      <td>1</td>\n","      <td>60.0</td>\n","      <td>1</td>\n","      <td>31.0</td>\n","      <td>60.0</td>\n","      <td>132.0</td>\n","      <td>78.0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>3</td>\n","      <td>2</td>\n","      <td>54.0</td>\n","      <td>3</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0.0</td>\n","      <td>0</td>\n","      <td>46.0</td>\n","      <td>1</td>\n","      <td>46.0</td>\n","      <td>1</td>\n","      <td>20.0</td>\n","      <td>19.0</td>\n","      <td>136.0</td>\n","      <td>64.0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>3</td>\n","      <td>2</td>\n","      <td>82.0</td>\n","      <td>4</td>\n","      <td>2</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0.0</td>\n","      <td>0</td>\n","      <td>57.0</td>\n","      <td>1</td>\n","      <td>57.0</td>\n","      <td>1</td>\n","      <td>14.0</td>\n","      <td>33.0</td>\n","      <td>134.0</td>\n","      <td>86.0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>3</td>\n","      <td>2</td>\n","      <td>62.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0.0</td>\n","      <td>0</td>\n","      <td>47.0</td>\n","      <td>0</td>\n","      <td>46.0</td>\n","      <td>0</td>\n","      <td>21.0</td>\n","      <td>14.0</td>\n","      <td>144.0</td>\n","      <td>84.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-03d5814e-a17b-4755-8fbc-d225635b8f34')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-03d5814e-a17b-4755-8fbc-d225635b8f34 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-03d5814e-a17b-4755-8fbc-d225635b8f34');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-a15ff9ca-d956-43b3-850c-744b30d7663a\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-a15ff9ca-d956-43b3-850c-744b30d7663a')\"\n","            title=\"Suggest charts.\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-a15ff9ca-d956-43b3-850c-744b30d7663a button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"]},"metadata":{},"execution_count":67}]},{"cell_type":"code","source":["import pandas as pd\n","import numpy as np\n","from sklearn.preprocessing import StandardScaler\n","from sklearn.metrics import accuracy_score\n","\n","\n","# Split the new data into features (X_new) and labels (y_new) if applicable\n","X_new = df.drop(\"Stage\", axis=1)  # Assuming \"stage\" is the label column\n","ground_truth_labels = df['Stage']\n","new_labels = label_as_binary.fit_transform(ground_truth_labels)\n","\n","# Use the trained model to make predictions on the new dataset\n","#y_new_pred = ann.predict(X_new)\n","#y_new_pred_labels = np.argmax(y_new_pred, axis=1)\n","\n","# Evaluate the model's performance on the new dataset\n","#new_data_accuracy = accuracy_score(y_new, y_new_pred_labels)\n","#print(f'Accuracy on the new unseen dataset: {new_data_accuracy}')"],"metadata":{"id":"wRu6EjZFL4Ol"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["new_predictions = (ann.predict(X_new) > 0.5).astype(\"int32\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ghah8wFDCYTO","executionInfo":{"status":"ok","timestamp":1694885947907,"user_tz":360,"elapsed":182,"user":{"displayName":"NAZILA ameli","userId":"11519358739927677652"}},"outputId":"acb6695c-97ad-4011-e8af-5f91402d7e8a"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["1/1 [==============================] - 0s 35ms/step\n"]}]},{"cell_type":"code","source":["# Calculate accuracy\n","accuracy = accuracy_score(new_labels, new_predictions)\n","accuracy\n","\n","# Generate a classification report for more detailed metrics\n","#report = classification_report(new_labels, new_predictions)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"4ZPZCuRVCji-","executionInfo":{"status":"ok","timestamp":1694886064204,"user_tz":360,"elapsed":185,"user":{"displayName":"NAZILA ameli","userId":"11519358739927677652"}},"outputId":"4a983f99-d0e4-4a3d-f583-b9e0404b076b"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0.65625"]},"metadata":{},"execution_count":90}]},{"cell_type":"code","source":["new_matrix = metrics.confusion_matrix(new_labels.argmax(axis=1), new_predictions.argmax(axis=1))\n","print(new_matrix)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"bu8iCxG5FocE","executionInfo":{"status":"ok","timestamp":1694886192683,"user_tz":360,"elapsed":192,"user":{"displayName":"NAZILA ameli","userId":"11519358739927677652"}},"outputId":"26e7354b-4693-4632-918d-1ab023bb0581"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[[ 0  0  1  0]\n"," [ 0  0  4  0]\n"," [ 0  0 21  0]\n"," [ 0  0  6  0]]\n"]}]},{"cell_type":"code","source":["# visualize confusion matrix with seaborn heatmap\n","\n","from sklearn.metrics import confusion_matrix\n","import seaborn as sns\n","conf_mat = pd.DataFrame(data=new_matrix, columns=['predicted stage 1', 'predicted stage 2', 'predicted stage 3', 'predicted stage 4'],index=['actual stage 1','actual stage 2', 'actual stage 3', 'actual stage 4'])\n","sns.heatmap(conf_mat, square=True, annot=True, cmap='YlGnBu', fmt='d', cbar=False)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":555},"id":"QUoAX3z-F0SJ","executionInfo":{"status":"ok","timestamp":1694886316503,"user_tz":360,"elapsed":700,"user":{"displayName":"NAZILA ameli","userId":"11519358739927677652"}},"outputId":"d45cbf05-17d4-4dec-ceaf-b5c58cc5cf50"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<Axes: >"]},"metadata":{},"execution_count":94},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["# Calculate true positives, false positives, and false negatives\n","tp = np.diag(new_matrix)\n","fp = np.sum(new_matrix, axis=0) - tp\n","fn = np.sum(new_matrix, axis=1) - tp\n","\n","# Calculate precision\n","precision = tp / (tp + fp)\n","\n","# Calculate recall\n","recall = tp / (tp + fn)\n","\n","# Calculate F1-score\n","f1_score = 2 * (precision * recall) / (precision + recall)\n","\n","# Calculate accuracy\n","accuracy = np.sum(tp) / np.sum(new_matrix)\n","\n","print(\"Precision:\", precision)\n","print(\"Recall:\", recall)\n","print(\"F1-score:\", f1_score)\n","print(\"Accuracy:\", accuracy)"],"metadata":{"id":"fZp7x69JgMWW","executionInfo":{"status":"ok","timestamp":1694886439596,"user_tz":360,"elapsed":182,"user":{"displayName":"NAZILA ameli","userId":"11519358739927677652"}},"outputId":"44f4214c-8779-4a4a-e81f-33f6e9521950","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Precision: [    nan     nan 0.65625     nan]\n","Recall: [0. 0. 1. 0.]\n","F1-score: [       nan        nan 0.79245283        nan]\n","Accuracy: 0.65625\n"]},{"output_type":"stream","name":"stderr","text":["<ipython-input-96-d1093b394ffb>:11: RuntimeWarning: invalid value encountered in divide\n","  precision = tp / (tp + fp)\n"]}]},{"cell_type":"code","source":["from sklearn.metrics import precision_score, recall_score, f1_score\n","\n","# Calculate precision, recall, and F1-score using 'micro' average\n","precision_micro = precision_score(new_labels, new_predictions, average='micro')\n","recall_micro = recall_score(new_labels, new_predictions, average='micro')\n","f1_micro = f1_score(new_labels, new_predictions, average='micro')\n","\n","# Calculate precision, recall, and F1-score using 'macro' average\n","precision_macro = precision_score(new_labels, new_predictions, average='macro')\n","recall_macro = recall_score(new_labels, new_predictions, average='macro')\n","f1_macro = f1_score(new_labels, new_predictions, average='macro')\n","\n","# Calculate precision, recall, and F1-score using 'weighted' average\n","precision_weighted = precision_score(new_labels, new_predictions, average='weighted')\n","recall_weighted = recall_score(new_labels, new_predictions, average='weighted')\n","f1_weighted = f1_score(new_labels, new_predictions, average='weighted')\n","\n","# Print or use the metrics as needed\n","print(f'Precision (Micro): {precision_micro:.4f}')\n","print(f'Recall (Micro): {recall_micro:.4f}')\n","print(f'F1-score (Micro): {f1_micro:.4f}')\n","\n","print(f'Precision (Macro): {precision_macro:.4f}')\n","print(f'Recall (Macro): {recall_macro:.4f}')\n","print(f'F1-score (Macro): {f1_macro:.4f}')\n","\n","print(f'Precision (Weighted): {precision_weighted:.4f}')\n","print(f'Recall (Weighted): {recall_weighted:.4f}')\n","print(f'F1-score (Weighted): {f1_weighted:.4f}')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"cOr_hBk3HUwd","executionInfo":{"status":"ok","timestamp":1694886653033,"user_tz":360,"elapsed":182,"user":{"displayName":"NAZILA ameli","userId":"11519358739927677652"}},"outputId":"0e032c23-7808-40da-fcac-33e8def810ae"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Precision (Micro): 0.6562\n","Recall (Micro): 0.6562\n","F1-score (Micro): 0.6562\n","Precision (Macro): 0.1641\n","Recall (Macro): 0.2500\n","F1-score (Macro): 0.1981\n","Precision (Weighted): 0.4307\n","Recall (Weighted): 0.6562\n","F1-score (Weighted): 0.5200\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, msg_start, len(result))\n","/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, msg_start, len(result))\n"]}]},{"cell_type":"code","source":["# @title THE END :))))\n"],"metadata":{"id":"k9qyHOsLI9_m"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# BERT ARTICLE\n","\n","#@title showing predicted vs. actual values\n","#showing predicted values vs. actual ones\n","\n","new_predictions = (ann.predict(X) > 0.5).astype(\"int32\")\n","for i in range(30):\n","    print(f\"{i+1}. x: {y_ann[i]}, y: {new_predictions[i]}\")"],"metadata":{"id":"j9T_bRvigAs8"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#BERT ARTICLE\n","\n","#making a confusion matrix\n","\n","new_matrix = metrics.confusion_matrix(y_ann.argmax(axis=1), new_predictions.argmax(axis=1))\n","print(new_matrix)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"hk25Lx70gEJR","executionInfo":{"status":"ok","timestamp":1694884281385,"user_tz":360,"elapsed":170,"user":{"displayName":"NAZILA ameli","userId":"11519358739927677652"}},"outputId":"5177810f-6eb1-4f9e-d5b1-d54b357a2e1a"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[[  3   0   2   0]\n"," [ 11   1  22   1]\n"," [ 14   0 186   8]\n"," [ 11   0  35  15]]\n"]}]},{"cell_type":"code","source":["# BERT ARTICLE\n","\n","## visualize confusion matrix with seaborn heatmap\n","\n","from sklearn.metrics import confusion_matrix\n","import seaborn as sns\n","conf_mat = pd.DataFrame(data=new_matrix, columns=['Actual stage 1', 'Actual stage 2', 'Actual stage 3', 'Actual stage 4'],index=['Predicted stage 1','Predicted stage 2', 'Predicted stage 3', 'Predicted stage 4'])\n","sns.heatmap(conf_mat, square=True, annot=True, cmap='YlGnBu', fmt='d', cbar=False)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":533},"id":"9tjgFUXtgHml","executionInfo":{"status":"ok","timestamp":1694884284506,"user_tz":360,"elapsed":458,"user":{"displayName":"NAZILA ameli","userId":"11519358739927677652"}},"outputId":"0e312c91-c5ed-4594-9c62-5072bbe598ec"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<Axes: >"]},"metadata":{},"execution_count":51},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["#@title Finding the optimum number of hidden layers and nodes in a neural network model\n","#Function to vary number of nodes\n","\n","import math\n","\n","def FindLayerNodesLinear(n_layers, first_layer_nodes, last_layer_nodes):\n","    layers = []\n","\n","    nodes_increment = (last_layer_nodes - first_layer_nodes)/ (n_layers-1)\n","    nodes = first_layer_nodes\n","    for i in range(1, n_layers+1):\n","        layers.append(math.ceil(nodes))\n","        nodes = nodes + nodes_increment\n","\n","    return layers\n"],"metadata":{"id":"XJWCNniW0MH2"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#@title Function to dynamically change model parameters\n","from sklearn.metrics import confusion_matrix\n","from sklearn.model_selection import GridSearchCV\n","\n","!pip install scikeras\n","\n","import tensorflow as tf\n","from tensorflow.keras.layers import Input, Dense, GlobalMaxPooling1D, LeakyReLU\n","from scikeras.wrappers import KerasClassifier\n","\n","from tensorflow.keras.models import Model\n","\n","\n","def createmodel(n_layers=2, first_layer_nodes=4, last_layer_nodes=4, activation_func='relu', loss_func='binary_crossentropy'):\n","    model = Sequential()\n","    n_nodes = FindLayerNodesLinear(n_layers, first_layer_nodes, last_layer_nodes)\n","    for i in range(1, n_layers):\n","        if i==1:\n","            model.add(Dense(first_layer_nodes, input_dim=X_train.shape[1], activation=activation_func))\n","        else:\n","            model.add(Dense(n_nodes[i-1], activation=activation_func))\n","\n","    model.add(Dense(4, activation=activation_func))\n","    model.compile(optimizer='adam', loss=loss_func, metrics = [\"accuracy\"])\n","\n","    return model\n","\n","model =  KerasClassifier(build_fn=createmodel, epochs=10, batch_size=10, verbose = False)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"dKsT__qWTpeI","executionInfo":{"status":"ok","timestamp":1694883646679,"user_tz":360,"elapsed":5399,"user":{"displayName":"NAZILA ameli","userId":"11519358739927677652"}},"outputId":"a171cff7-a241-4429-bd44-bdfbcf1bb005"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Collecting scikeras\n","  Downloading scikeras-0.11.0-py3-none-any.whl (27 kB)\n","Requirement already satisfied: packaging>=0.21 in /usr/local/lib/python3.10/dist-packages (from scikeras) (23.1)\n","Requirement already satisfied: scikit-learn>=1.0.0 in /usr/local/lib/python3.10/dist-packages (from scikeras) (1.2.2)\n","Requirement already satisfied: numpy>=1.17.3 in /usr/local/lib/python3.10/dist-packages (from scikit-learn>=1.0.0->scikeras) (1.23.5)\n","Requirement already satisfied: scipy>=1.3.2 in /usr/local/lib/python3.10/dist-packages (from scikit-learn>=1.0.0->scikeras) (1.11.2)\n","Requirement already satisfied: joblib>=1.1.1 in /usr/local/lib/python3.10/dist-packages (from scikit-learn>=1.0.0->scikeras) (1.3.2)\n","Requirement already satisfied: threadpoolctl>=2.0.0 in /usr/local/lib/python3.10/dist-packages (from scikit-learn>=1.0.0->scikeras) (3.2.0)\n","Installing collected packages: scikeras\n","Successfully installed scikeras-0.11.0\n"]}]},{"cell_type":"code","source":["from sklearn.metrics import confusion_matrix\n","from sklearn.model_selection import GridSearchCV\n","import tensorflow as tf\n","from tensorflow.keras.layers import Dense\n","from scikeras.wrappers import KerasClassifier\n","from tensorflow.keras.models import Sequential\n","\n","def createmodel(n_layers=2, first_layer_nodes=4, last_layer_nodes=4, activation_func='relu', loss_func='binary_crossentropy'):\n","    model = Sequential()\n","    n_nodes = [first_layer_nodes] * n_layers\n","    for i in range(1, n_layers):\n","        model.add(Dense(n_nodes[i-1], input_dim=X_train.shape[1], activation=activation_func))\n","    model.add(Dense(4, activation=activation_func))\n","    model.compile(optimizer='adam', loss=loss_func, metrics=['accuracy'])\n","    return model\n","\n","\n","model = KerasClassifier(build_fn=createmodel, n_layers=2, first_layer_nodes=4, last_layer_nodes=4, epochs=10, batch_size=10, verbose=0)"],"metadata":{"id":"iDrqn8njaNxL"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Define cross-validation\n","from sklearn.model_selection import StratifiedKFold\n","\n","kfold = StratifiedKFold(n_splits=5, shuffle=True, random_state=42)\n","\n","# Define the parameter grid for GridSearchCV (customize as needed)\n","param_grid = dict(n_layers=[2], first_layer_nodes=range(4, 20), last_layer_nodes=range(4, 20), batch_size=[16], epochs=[30, 50])\n","\n","# Perform grid search with cross-validation\n","grid = GridSearchCV(estimator=model, param_grid=param_grid, cv=kfold)\n","grid.fit(X, y)\n","\n","# Print the best parameters and corresponding accuracy\n","print(f\"Best Parameters: {grid.best_params_}\")\n","print(f\"Best Accuracy: {grid.best_score_}\")"],"metadata":{"id":"w_1EJI-UWowD"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#@title Optimal Grid Parameters\n","print(grid.best_score_)\n","print(grid.best_params_)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"nGfcZsav6Yty","executionInfo":{"status":"ok","timestamp":1655521006933,"user_tz":360,"elapsed":220,"user":{"displayName":"Nazila Ameli","userId":"00997905082243354555"}},"outputId":"c050ef51-69c4-4c47-8027-9fc2d7a7fd8d"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["0.6762559533119201\n","{'activation_func': 'relu', 'batch_size': 16, 'epochs': 50, 'first_layer_nodes': 8, 'last_layer_nodes': 13, 'loss_func': 'categorical_crossentropy', 'n_layers': 2}\n"]}]},{"cell_type":"code","source":["#@title  The best parameters\n","pd.DataFrame(grid.cv_results_)[['mean_test_score', 'std_test_score', 'params']].to_csv('GridOptimization.csv')"],"metadata":{"id":"V7Q1X5Q26sXA"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#@title Evaluating the model on test data\n","\n","label_as_binary = LabelBinarizer()\n","y_test_ann = label_as_binary.fit_transform(y_test)\n","y_test_ann"],"metadata":{"id":"Q8TfCSnCZpjU"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["ann.evaluate(X_test,y_test_ann,verbose=2)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"sADR-YDyZsfG","executionInfo":{"status":"ok","timestamp":1688510267504,"user_tz":360,"elapsed":270,"user":{"displayName":"Nazila Ameli","userId":"00997905082243354555"}},"outputId":"ccc788c8-bf98-44d9-fd02-352f6f8b660b"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["3/3 - 0s - loss: 0.9258 - accuracy: 0.6237 - 145ms/epoch - 48ms/step\n"]},{"output_type":"execute_result","data":{"text/plain":["[0.9257649779319763, 0.6236559152603149]"]},"metadata":{},"execution_count":80}]},{"cell_type":"code","source":["#@title showing predicted vs. actual values\n","#showing predicted values vs. actual ones\n","\n","predictions = (ann.predict(X_test) > 0.5).astype(\"int32\")\n","for i in range(30):\n","    print(f\"{i+1}. x: {y_test_ann[i]}, y: {predictions[i]}\")"],"metadata":{"id":"0-Aytn_IyxU9"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#making a confusion matrix\n","\n","matrix = metrics.confusion_matrix(y_test_ann.argmax(axis=1), predictions.argmax(axis=1))\n","print(matrix)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"D9fiHbW6y0dO","executionInfo":{"status":"ok","timestamp":1688508582102,"user_tz":360,"elapsed":272,"user":{"displayName":"Nazila Ameli","userId":"00997905082243354555"}},"outputId":"07e3c594-ece6-4440-bc44-8279c05307bf"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[[ 1 14  0]\n"," [ 3 53  3]\n"," [ 4 14  1]]\n"]}]},{"cell_type":"code","source":["## visualize confusion matrix with seaborn heatmap\n","\n","from sklearn.metrics import confusion_matrix\n","import seaborn as sns\n","conf_mat = pd.DataFrame(data=matrix, columns=['Actual stage 1/2', 'Actual stage 3', 'Actual stage 4'],index=['Predicted stage 1/2', 'Predicted stage 3', 'Predicted stage 4'])\n","sns.heatmap(conf_mat, square=True, annot=True, cmap='YlGnBu', fmt='d', cbar=False)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":447},"id":"03vrn4cey2lD","executionInfo":{"status":"ok","timestamp":1688508585219,"user_tz":360,"elapsed":247,"user":{"displayName":"Nazila Ameli","userId":"00997905082243354555"}},"outputId":"5f11117f-05e9-4fed-aeca-e734861fdb8c"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<Axes: >"]},"metadata":{},"execution_count":41},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["#Generate Dummy data\n","\n","x_train= np.random.random((200, 19))\n","Y_train= keras.utils.np_utils.to_categorical(np.random.randint(4, size=(200, 1)), num_classes=4)\n","x_test= np.random.random ((119, 19 ))\n","Y_test= keras.utils.np_utils.to_categorical(np.random.randint(4, size=(119, 1)), num_classes=4)"],"metadata":{"id":"SVJj4lcz4T6H"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#Fitting ANN\n","ann.fit(x_train,Y_train, batch_size= 16, epochs = 30)"],"metadata":{"id":"cJEyYWDnIesi"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#Predicting result for Single Observation\n","print(ann.predict(sc.transform([[3.0,\t72.0,\t999.0,\t999.0,\t999.0,\t1.0,\t999.0,\t999.0,\t999.0,\t999.0,\t999.0,\t54.0,\t1.0,\t54.0,\t1.0,\t54.0,\t54.0,\t117,\t8]])) > 0.5)"],"metadata":{"id":"H1obRP9p2V7X"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#Saving created neural network and weights\n","ann.save(\"ANN.h5\")\n","ann.save_weights(\"Weights.h5\")"],"metadata":{"id":"3wR7YVCf27GZ"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import os\n","checkpoint_path = \"training_1/cp.ckpt\"\n","checkpoint_dir = os.path.dirname(checkpoint_path)\n","\n","# Create a callback that saves the model's weights\n","cp_callback = tf.keras.callbacks.ModelCheckpoint(filepath=checkpoint_path,\n","                                                 save_weights_only=True,\n","                                                 verbose=1)\n","\n","# Train the model with the new callback\n","ann.fit(X_train,y_train_ann, batch_size=16,\n","          epochs=30,\n","          callbacks=[cp_callback])  # Pass callback to training"],"metadata":{"id":"M3--RJqHT9Ai"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# BERT ARTICLE\n","\n","X = sc.transform(X)\n","label_as_binary = LabelBinarizer()\n","y = label_as_binary.fit_transform(y)\n","y"],"metadata":{"id":"essbqYNf90X0"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["ann.evaluate(X,y,verbose=2)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"vWkYvLfbDH5q","executionInfo":{"status":"ok","timestamp":1688510288450,"user_tz":360,"elapsed":221,"user":{"displayName":"Nazila Ameli","userId":"00997905082243354555"}},"outputId":"3bdeabfa-aa7c-49ff-efd8-e7911b0aba82"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["10/10 - 0s - loss: 5.6777 - accuracy: 0.1974 - 22ms/epoch - 2ms/step\n"]},{"output_type":"execute_result","data":{"text/plain":["[5.677652835845947, 0.19741100072860718]"]},"metadata":{},"execution_count":82}]},{"cell_type":"code","source":["new_predictions = (ann.predict(X) > 0.5).astype(\"int32\")\n","# for i in range(20):\n","    # print(f\"{i+1}. x: {y[i]}, y: {new_predictions[i]}\")\n","new_predictions"],"metadata":{"id":"c82de22Wi2GW"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#making a confusion matrix\n","\n","new_matrix = metrics.confusion_matrix(y.argmax(axis=1), new_predictions.argmax(axis=1))\n","print(new_matrix)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"w3KDifUS-VHV","executionInfo":{"status":"ok","timestamp":1688509099867,"user_tz":360,"elapsed":187,"user":{"displayName":"Nazila Ameli","userId":"00997905082243354555"}},"outputId":"f1730902-fdf0-478d-a25a-388470ce8d25"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[[  0   0  40]\n"," [  0   0 208]\n"," [  0   0  61]]\n"]}]},{"cell_type":"code","source":["#making a confusion matrix\n","\n","new_matrix = metrics.confusion_matrix(y, new_predictions.argmax(axis=1))\n","print(new_matrix)"],"metadata":{"id":"aE84omYc7ZVk"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["## visualize confusion matrix with seaborn heatmap\n","\n","from sklearn.metrics import confusion_matrix\n","import seaborn as sns\n","conf_mat = pd.DataFrame(data=new_matrix, columns=['Actual stage 1/2', 'Actual stage 3', 'Actual stage 4'],index=['Predicted stage 1/2', 'Predicted stage 3', 'Predicted stage 4'])\n","sns.heatmap(conf_mat, square=True, annot=True, cmap='YlGnBu', fmt='d', cbar=False)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":447},"id":"zCZNnd4R8Cvt","executionInfo":{"status":"ok","timestamp":1688508979186,"user_tz":360,"elapsed":209,"user":{"displayName":"Nazila Ameli","userId":"00997905082243354555"}},"outputId":"7686810d-8de7-49f8-ed26-e38b01a35171"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<Axes: >"]},"metadata":{},"execution_count":61},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["import numpy as np\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","\n","# Provided confusion matrix data for the first model\n","confusion_matrix_data_1 = np.array([\n","    [1, 0, 0, 0],  # Actual Stage I\n","    [0, 1, 2, 1],  # Actual Stage II\n","    [0, 3, 14, 4], # Actual Stage III\n","    [0, 0, 1, 5],  # Actual Stage IV\n","])\n","\n","# Provided confusion matrix data for the second model\n","confusion_matrix_data_2 = np.array([\n","    [0, 0, 1, 0],  # Actual Stage I\n","    [0, 2, 2, 0],  # Actual Stage II\n","    [0, 4, 17, 0], # Actual Stage III\n","    [0, 3, 3, 0],  # Actual Stage IV\n","])\n","\n","# True labels\n","true_labels = ['Stage I', 'Stage II', 'Stage III', 'Stage IV']\n","\n","# Plotting the confusion matrices side by side\n","fig, axes = plt.subplots(1, 2, figsize=(16, 6))\n","\n","# First confusion matrix\n","sns.heatmap(confusion_matrix_data_1, annot=True, fmt='d', cmap='Blues', ax=axes[0],\n","            xticklabels=true_labels, yticklabels=true_labels)\n","axes[0].set_title('BERT')\n","axes[0].set_xlabel('Predicted Labels')\n","axes[0].set_ylabel('True Labels')\n","\n","# Second confusion matrix\n","sns.heatmap(confusion_matrix_data_2, annot=True, fmt='d', cmap='Greens', ax=axes[1],\n","            xticklabels=true_labels, yticklabels=true_labels)\n","axes[1].set_title('RegEX/MLP')\n","axes[1].set_xlabel('Predicted Labels')\n","axes[1].set_ylabel('True Labels')\n","\n","plt.tight_layout()\n","plt.show()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":536},"id":"St8hdrYQMpxW","executionInfo":{"status":"ok","timestamp":1723512033957,"user_tz":360,"elapsed":1451,"user":{"displayName":"Nazila Ameli","userId":"00997905082243354555"}},"outputId":"9d35e12f-9412-4889-8cba-36dfce24206b"},"execution_count":6,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1600x600 with 4 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["import numpy as np\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","\n","# Provided confusion matrix data for the first model\n","confusion_matrix_data_1 = np.array([\n","    [0, 2, 0],  # Actual Grade A\n","    [0, 18, 3],  # Actual Grade B\n","    [1, 3, 5] # Actual Grade C\n","])\n","\n","# Provided confusion matrix data for the second model\n","confusion_matrix_data_2 = np.array([\n","    [0, 0, 2],  # Actual Grade A\n","    [1, 18, 2],  # Actual Grade B\n","    [1, 6, 2] # Actual Grade C\n","])\n","\n","# True labels\n","true_labels = ['Grade A', 'Grade B', 'Grade C']\n","\n","# Plotting the confusion matrices side by side\n","fig, axes = plt.subplots(1, 2, figsize=(16, 6))\n","\n","# First confusion matrix\n","sns.heatmap(confusion_matrix_data_1, annot=True, fmt='d', cmap='Blues', ax=axes[0],\n","            xticklabels=true_labels, yticklabels=true_labels)\n","axes[0].set_title('BERT')\n","axes[0].set_xlabel('Predicted Labels')\n","axes[0].set_ylabel('True Labels')\n","\n","# Second confusion matrix\n","sns.heatmap(confusion_matrix_data_2, annot=True, fmt='d', cmap='Greens', ax=axes[1],\n","            xticklabels=true_labels, yticklabels=true_labels)\n","axes[1].set_title('RegEX/MLP')\n","axes[1].set_xlabel('Predicted Labels')\n","axes[1].set_ylabel('True Labels')\n","\n","plt.tight_layout()\n","plt.show()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":536},"id":"GYuow4KCR1LP","executionInfo":{"status":"ok","timestamp":1723512074430,"user_tz":360,"elapsed":1768,"user":{"displayName":"Nazila Ameli","userId":"00997905082243354555"}},"outputId":"b70423e2-2b4d-4ef4-8b9a-1727a03df4ef"},"execution_count":7,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1600x600 with 4 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["from sklearn.metrics import precision_score, recall_score, f1_score\n","\n","# True labels and predicted labels\n","y_true = [2, 2, 2, 1, 1, 2, 3, 3, 3, 3, 3, 2, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]\n","y_pred = [2, 2, 2, 2, 2, 2, 1, 1, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 1, 1, 1, 2, 2, 2, 2, 2, 1]\n","\n","# Calculate precision, recall, and F1-score\n","precision = precision_score(y_true, y_pred, average=None, labels=[0, 1, 2, 3])\n","recall = recall_score(y_true, y_pred, average=None, labels=[0, 1, 2, 3])\n","f1 = f1_score(y_true, y_pred, average=None, labels=[0, 1, 2, 3])\n","\n","print(\"Precision: \", precision)\n","print(\"Recall: \", recall)\n","print(\"F1-Score: \", f1)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"zNq_kUG0Nlnm","executionInfo":{"status":"ok","timestamp":1723510192593,"user_tz":360,"elapsed":605,"user":{"displayName":"Nazila Ameli","userId":"00997905082243354555"}},"outputId":"e14acd56-0936-470c-d523-4b2fdab98e2f"},"execution_count":4,"outputs":[{"output_type":"stream","name":"stdout","text":["Model 1 - Precision: [1.  1.  1.  0.6]\n","Model 1 - Recall: [1.         1.         0.80952381 1.        ]\n","Model 1 - F1-Score: [1.         1.         0.89473684 0.75      ]\n","Model 2 - Precision: [0.         0.44444444 0.73913043 0.        ]\n","Model 2 - Recall: [0.         1.         0.80952381 0.        ]\n","Model 2 - F1-Score: [0.         0.61538462 0.77272727 0.        ]\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1471: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, msg_start, len(result))\n"]}]}]}